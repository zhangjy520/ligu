<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.ligu.mvc.persistence.dao.PvpPersonMapper" >
  <resultMap id="BaseResultMap" type="cc.ligu.mvc.persistence.entity.PvpPerson" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="person_a_id" property="personAId" jdbcType="INTEGER" />
    <result column="person_b_id" property="personBId" jdbcType="INTEGER" />
    <result column="question_ids" property="questionIds" jdbcType="VARCHAR" />
    <result column="person_a_score" property="personAScore" jdbcType="VARCHAR" />
    <result column="person_b_score" property="personBScore" jdbcType="VARCHAR" />
    <result column="pvp_time" property="pvpTime" jdbcType="VARCHAR" />
    <result column="pvp_type" property="pvpType" jdbcType="INTEGER" />
    <result column="person_a_current_jifen" property="personACurrentJifen" jdbcType="INTEGER" />
    <result column="person_a_this_score" property="personAThisScore" jdbcType="INTEGER" />
    <result column="person_achievement_id" property="personAchievementId" jdbcType="INTEGER" />
    <result column="complete" property="complete" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="BaseResultMapView" type="cc.ligu.mvc.modelView.PvpPersonView" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="person_a_id" property="personAId" jdbcType="INTEGER" />
    <result column="person_b_id" property="personBId" jdbcType="INTEGER" />
    <result column="question_ids" property="questionIds" jdbcType="VARCHAR" />
    <result column="person_a_score" property="personAScore" jdbcType="VARCHAR" />
    <result column="person_b_score" property="personBScore" jdbcType="VARCHAR" />
    <result column="pvp_time" property="pvpTime" jdbcType="VARCHAR" />
    <result column="pvp_type" property="pvpType" jdbcType="INTEGER" />
    <result column="person_a_current_jifen" property="personACurrentJifen" jdbcType="INTEGER" />
    <result column="person_a_this_score" property="personAThisScore" jdbcType="INTEGER" />
    <result column="person_achievement_id" property="personAchievementId" jdbcType="INTEGER" />
    <result column="complete" property="complete" jdbcType="INTEGER" />
    <result column="archLevel" property="archLevel" jdbcType="INTEGER" />
    <result column="archName" property="archName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, person_a_id, person_b_id, question_ids, person_a_score, person_b_score, pvp_time, 
    pvp_type, person_a_current_jifen, person_a_this_score, person_achievement_id, complete
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cc.ligu.mvc.persistence.entity.PvpPersonExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from pvp_person
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from pvp_person
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from pvp_person
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cc.ligu.mvc.persistence.entity.PvpPersonExample" >
    delete from pvp_person
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cc.ligu.mvc.persistence.entity.PvpPerson" >
    insert into pvp_person (id, person_a_id, person_b_id, 
      question_ids, person_a_score, person_b_score, 
      pvp_time, pvp_type, person_a_current_jifen, 
      person_a_this_score, person_achievement_id, 
      complete)
    values (#{id,jdbcType=INTEGER}, #{personAId,jdbcType=INTEGER}, #{personBId,jdbcType=INTEGER}, 
      #{questionIds,jdbcType=VARCHAR}, #{personAScore,jdbcType=VARCHAR}, #{personBScore,jdbcType=VARCHAR}, 
      #{pvpTime,jdbcType=VARCHAR}, #{pvpType,jdbcType=INTEGER}, #{personACurrentJifen,jdbcType=INTEGER}, 
      #{personAThisScore,jdbcType=INTEGER}, #{personAchievementId,jdbcType=INTEGER}, 
      #{complete,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cc.ligu.mvc.persistence.entity.PvpPerson"  useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    insert into pvp_person
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="personAId != null" >
        person_a_id,
      </if>
      <if test="personBId != null" >
        person_b_id,
      </if>
      <if test="questionIds != null" >
        question_ids,
      </if>
      <if test="personAScore != null" >
        person_a_score,
      </if>
      <if test="personBScore != null" >
        person_b_score,
      </if>
      <if test="pvpTime != null" >
        pvp_time,
      </if>
      <if test="pvpType != null" >
        pvp_type,
      </if>
      <if test="personACurrentJifen != null" >
        person_a_current_jifen,
      </if>
      <if test="personAThisScore != null" >
        person_a_this_score,
      </if>
      <if test="personAchievementId != null" >
        person_achievement_id,
      </if>
      <if test="complete != null" >
        complete,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="personAId != null" >
        #{personAId,jdbcType=INTEGER},
      </if>
      <if test="personBId != null" >
        #{personBId,jdbcType=INTEGER},
      </if>
      <if test="questionIds != null" >
        #{questionIds,jdbcType=VARCHAR},
      </if>
      <if test="personAScore != null" >
        #{personAScore,jdbcType=VARCHAR},
      </if>
      <if test="personBScore != null" >
        #{personBScore,jdbcType=VARCHAR},
      </if>
      <if test="pvpTime != null" >
        #{pvpTime,jdbcType=VARCHAR},
      </if>
      <if test="pvpType != null" >
        #{pvpType,jdbcType=INTEGER},
      </if>
      <if test="personACurrentJifen != null" >
        #{personACurrentJifen,jdbcType=INTEGER},
      </if>
      <if test="personAThisScore != null" >
        #{personAThisScore,jdbcType=INTEGER},
      </if>
      <if test="personAchievementId != null" >
        #{personAchievementId,jdbcType=INTEGER},
      </if>
      <if test="complete != null" >
        #{complete,jdbcType=INTEGER},
      </if>
    </trim>
    <selectKey resultType="int" keyProperty="id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <update id="updateByExampleSelective" parameterType="map" >
    update pvp_person
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.personAId != null" >
        person_a_id = #{record.personAId,jdbcType=INTEGER},
      </if>
      <if test="record.personBId != null" >
        person_b_id = #{record.personBId,jdbcType=INTEGER},
      </if>
      <if test="record.questionIds != null" >
        question_ids = #{record.questionIds,jdbcType=VARCHAR},
      </if>
      <if test="record.personAScore != null" >
        person_a_score = #{record.personAScore,jdbcType=VARCHAR},
      </if>
      <if test="record.personBScore != null" >
        person_b_score = #{record.personBScore,jdbcType=VARCHAR},
      </if>
      <if test="record.pvpTime != null" >
        pvp_time = #{record.pvpTime,jdbcType=VARCHAR},
      </if>
      <if test="record.pvpType != null" >
        pvp_type = #{record.pvpType,jdbcType=INTEGER},
      </if>
      <if test="record.personACurrentJifen != null" >
        person_a_current_jifen = #{record.personACurrentJifen,jdbcType=INTEGER},
      </if>
      <if test="record.personAThisScore != null" >
        person_a_this_score = #{record.personAThisScore,jdbcType=INTEGER},
      </if>
      <if test="record.personAchievementId != null" >
        person_achievement_id = #{record.personAchievementId,jdbcType=INTEGER},
      </if>
      <if test="record.complete != null" >
        complete = #{record.complete,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update pvp_person
    set id = #{record.id,jdbcType=INTEGER},
      person_a_id = #{record.personAId,jdbcType=INTEGER},
      person_b_id = #{record.personBId,jdbcType=INTEGER},
      question_ids = #{record.questionIds,jdbcType=VARCHAR},
      person_a_score = #{record.personAScore,jdbcType=VARCHAR},
      person_b_score = #{record.personBScore,jdbcType=VARCHAR},
      pvp_time = #{record.pvpTime,jdbcType=VARCHAR},
      pvp_type = #{record.pvpType,jdbcType=INTEGER},
      person_a_current_jifen = #{record.personACurrentJifen,jdbcType=INTEGER},
      person_a_this_score = #{record.personAThisScore,jdbcType=INTEGER},
      person_achievement_id = #{record.personAchievementId,jdbcType=INTEGER},
      complete = #{record.complete,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cc.ligu.mvc.persistence.entity.PvpPerson" >
    update pvp_person
    <set >
      <if test="personAId != null" >
        person_a_id = #{personAId,jdbcType=INTEGER},
      </if>
      <if test="personBId != null" >
        person_b_id = #{personBId,jdbcType=INTEGER},
      </if>
      <if test="questionIds != null" >
        question_ids = #{questionIds,jdbcType=VARCHAR},
      </if>
      <if test="personAScore != null" >
        person_a_score = #{personAScore,jdbcType=VARCHAR},
      </if>
      <if test="personBScore != null" >
        person_b_score = #{personBScore,jdbcType=VARCHAR},
      </if>
      <if test="pvpTime != null" >
        pvp_time = #{pvpTime,jdbcType=VARCHAR},
      </if>
      <if test="pvpType != null" >
        pvp_type = #{pvpType,jdbcType=INTEGER},
      </if>
      <if test="personACurrentJifen != null" >
        person_a_current_jifen = #{personACurrentJifen,jdbcType=INTEGER},
      </if>
      <if test="personAThisScore != null" >
        person_a_this_score = #{personAThisScore,jdbcType=INTEGER},
      </if>
      <if test="personAchievementId != null" >
        person_achievement_id = #{personAchievementId,jdbcType=INTEGER},
      </if>
      <if test="complete != null" >
        complete = #{complete,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cc.ligu.mvc.persistence.entity.PvpPerson" >
    update pvp_person
    set person_a_id = #{personAId,jdbcType=INTEGER},
      person_b_id = #{personBId,jdbcType=INTEGER},
      question_ids = #{questionIds,jdbcType=VARCHAR},
      person_a_score = #{personAScore,jdbcType=VARCHAR},
      person_b_score = #{personBScore,jdbcType=VARCHAR},
      pvp_time = #{pvpTime,jdbcType=VARCHAR},
      pvp_type = #{pvpType,jdbcType=INTEGER},
      person_a_current_jifen = #{personACurrentJifen,jdbcType=INTEGER},
      person_a_this_score = #{personAThisScore,jdbcType=INTEGER},
      person_achievement_id = #{personAchievementId,jdbcType=INTEGER},
      complete = #{complete,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectLatestPvpByPersonAId" resultMap="BaseResultMapView">
    SELECT
    pvp_person.*,
    pvp_archievement.`level` AS archLevel,
    pvp_archievement.`name` AS archName
    FROM
    pvp_person
    LEFT JOIN pvp_archievement
    ON pvp_person.`person_achievement_id` = pvp_archievement.`id`
    WHERE person_a_id = #{id,jdbcType=INTEGER}
    ORDER BY pvp_time DESC
    LIMIT 1
  </select>

  <select id="selectLatestPvpList" resultType="java.util.HashMap">
      SELECT
      a.*,
      c.`level` AS archLevel,
        c.`name` AS archName,
        o.name AS personName,
        o.`identity_num` AS identityNum
    FROM
      pvp_person a,
      pvp_archievement c,
      oa_person o
    WHERE a.pvp_time =
      (SELECT
        MAX(pvp_time)
      FROM
        pvp_person
      WHERE person_a_id = a.person_a_id)
      AND a.`person_achievement_id` = c.`id`
      AND a.`person_a_id` = o.`id`
    ORDER BY a.person_a_current_jifen DESC
  </select>
</mapper>