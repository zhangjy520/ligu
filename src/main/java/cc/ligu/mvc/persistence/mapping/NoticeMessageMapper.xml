<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.ligu.mvc.persistence.dao.NoticeMessageMapper" >
  <resultMap id="BaseResultMap" type="cc.ligu.mvc.persistence.entity.NoticeMessage" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="notice_time" property="noticeTime" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="notice_from" property="noticeFrom" jdbcType="INTEGER" />
    <result column="notice_to" property="noticeTo" jdbcType="INTEGER" />
    <result column="is_read" property="isRead" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="message" property="message" jdbcType="VARCHAR" />
    <result column="flag" property="flag" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="del_flag" property="delFlag" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, notice_time, type, notice_from, notice_to, is_read, title, message, flag, remark, 
    del_flag
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cc.ligu.mvc.persistence.entity.NoticeMessageExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from notice_message
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from notice_message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from notice_message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cc.ligu.mvc.persistence.entity.NoticeMessageExample" >
    delete from notice_message
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cc.ligu.mvc.persistence.entity.NoticeMessage" >
    insert into notice_message (id, notice_time, type, 
      notice_from, notice_to, is_read, 
      title, message, flag, 
      remark, del_flag)
    values (#{id,jdbcType=INTEGER}, #{noticeTime,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{noticeFrom,jdbcType=INTEGER}, #{noticeTo,jdbcType=INTEGER}, #{isRead,jdbcType=INTEGER}, 
      #{title,jdbcType=VARCHAR}, #{message,jdbcType=VARCHAR}, #{flag,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR}, #{delFlag,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cc.ligu.mvc.persistence.entity.NoticeMessage" >
    insert into notice_message
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="noticeTime != null" >
        notice_time,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="noticeFrom != null" >
        notice_from,
      </if>
      <if test="noticeTo != null" >
        notice_to,
      </if>
      <if test="isRead != null" >
        is_read,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="message != null" >
        message,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="noticeTime != null" >
        #{noticeTime,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="noticeFrom != null" >
        #{noticeFrom,jdbcType=INTEGER},
      </if>
      <if test="noticeTo != null" >
        #{noticeTo,jdbcType=INTEGER},
      </if>
      <if test="isRead != null" >
        #{isRead,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map" >
    update notice_message
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.noticeTime != null" >
        notice_time = #{record.noticeTime,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.noticeFrom != null" >
        notice_from = #{record.noticeFrom,jdbcType=INTEGER},
      </if>
      <if test="record.noticeTo != null" >
        notice_to = #{record.noticeTo,jdbcType=INTEGER},
      </if>
      <if test="record.isRead != null" >
        is_read = #{record.isRead,jdbcType=INTEGER},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.message != null" >
        message = #{record.message,jdbcType=VARCHAR},
      </if>
      <if test="record.flag != null" >
        flag = #{record.flag,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update notice_message
    set id = #{record.id,jdbcType=INTEGER},
      notice_time = #{record.noticeTime,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      notice_from = #{record.noticeFrom,jdbcType=INTEGER},
      notice_to = #{record.noticeTo,jdbcType=INTEGER},
      is_read = #{record.isRead,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      message = #{record.message,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      del_flag = #{record.delFlag,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cc.ligu.mvc.persistence.entity.NoticeMessage" >
    update notice_message
    <set >
      <if test="noticeTime != null" >
        notice_time = #{noticeTime,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="noticeFrom != null" >
        notice_from = #{noticeFrom,jdbcType=INTEGER},
      </if>
      <if test="noticeTo != null" >
        notice_to = #{noticeTo,jdbcType=INTEGER},
      </if>
      <if test="isRead != null" >
        is_read = #{isRead,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        message = #{message,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        del_flag = #{delFlag,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cc.ligu.mvc.persistence.entity.NoticeMessage" >
    update notice_message
    set notice_time = #{noticeTime,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      notice_from = #{noticeFrom,jdbcType=INTEGER},
      notice_to = #{noticeTo,jdbcType=INTEGER},
      is_read = #{isRead,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      message = #{message,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <insert id="insertSelectiveDuUpdate" parameterType="cc.ligu.mvc.persistence.entity.NoticeMessage" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into notice_message
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="noticeTime != null" >
        notice_time,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="noticeFrom != null" >
        notice_from,
      </if>
      <if test="noticeTo != null" >
        notice_to,
      </if>
      <if test="isRead != null" >
        is_read,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="message != null" >
        message,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="noticeTime != null" >
        #{noticeTime,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="noticeFrom != null" >
        #{noticeFrom,jdbcType=INTEGER},
      </if>
      <if test="noticeTo != null" >
        #{noticeTo,jdbcType=INTEGER},
      </if>
      <if test="isRead != null" >
        #{isRead,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="message != null" >
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=INTEGER},
      </if>
    </trim>
    <if test="noticeTime != null" >
      ON DUPLICATE KEY UPDATE `notice_time`= #{noticeTime,jdbcType=VARCHAR}
    </if>

  </insert>
</mapper>