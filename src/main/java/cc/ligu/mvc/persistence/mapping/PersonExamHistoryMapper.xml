<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.ligu.mvc.persistence.dao.PersonExamHistoryMapper">
    <resultMap id="BaseResultMap" type="cc.ligu.mvc.persistence.entity.PersonExamHistory">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="person_id" property="personId" jdbcType="INTEGER"/>
        <result column="full_score" property="fullScore" jdbcType="VARCHAR"/>
        <result column="obtain_score" property="obtainScore" jdbcType="VARCHAR"/>
        <result column="exam_time" property="examTime" jdbcType="VARCHAR"/>
        <result column="exam_type" property="examType" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="cc.ligu.mvc.persistence.entity.PersonExamHistoryWithBLOBs"
               extends="BaseResultMap">
        <result column="question_ids" property="questionIds" jdbcType="LONGVARCHAR"/>
        <result column="wrong_ids" property="wrongIds" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, person_id, full_score, obtain_score, exam_time, exam_type
  </sql>
    <sql id="Blob_Column_List">
    question_ids, wrong_ids
  </sql>
    <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistoryExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from ref_person_exam_history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistoryExample">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from ref_person_exam_history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from ref_person_exam_history
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ref_person_exam_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistoryExample">
        delete from ref_person_exam_history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistoryWithBLOBs">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into ref_person_exam_history (person_id, full_score, obtain_score,
        exam_time, exam_type, question_ids,
        wrong_ids)
        values (#{personId,jdbcType=INTEGER}, #{fullScore,jdbcType=VARCHAR}, #{obtainScore,jdbcType=VARCHAR},
        #{examTime,jdbcType=VARCHAR}, #{examType,jdbcType=INTEGER}, #{questionIds,jdbcType=LONGVARCHAR},
        #{wrongIds,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistoryWithBLOBs">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into ref_person_exam_history
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="personId != null">
                person_id,
            </if>
            <if test="fullScore != null">
                full_score,
            </if>
            <if test="obtainScore != null">
                obtain_score,
            </if>
            <if test="examTime != null">
                exam_time,
            </if>
            <if test="examType != null">
                exam_type,
            </if>
            <if test="questionIds != null">
                question_ids,
            </if>
            <if test="wrongIds != null">
                wrong_ids,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="personId != null">
                #{personId,jdbcType=INTEGER},
            </if>
            <if test="fullScore != null">
                #{fullScore,jdbcType=VARCHAR},
            </if>
            <if test="obtainScore != null">
                #{obtainScore,jdbcType=VARCHAR},
            </if>
            <if test="examTime != null">
                #{examTime,jdbcType=VARCHAR},
            </if>
            <if test="examType != null">
                #{examType,jdbcType=INTEGER},
            </if>
            <if test="questionIds != null">
                #{questionIds,jdbcType=LONGVARCHAR},
            </if>
            <if test="wrongIds != null">
                #{wrongIds,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByExampleSelective" parameterType="map">
        update ref_person_exam_history
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.personId != null">
                person_id = #{record.personId,jdbcType=INTEGER},
            </if>
            <if test="record.fullScore != null">
                full_score = #{record.fullScore,jdbcType=VARCHAR},
            </if>
            <if test="record.obtainScore != null">
                obtain_score = #{record.obtainScore,jdbcType=VARCHAR},
            </if>
            <if test="record.examTime != null">
                exam_time = #{record.examTime,jdbcType=VARCHAR},
            </if>
            <if test="record.examType != null">
                exam_type = #{record.examType,jdbcType=INTEGER},
            </if>
            <if test="record.questionIds != null">
                question_ids = #{record.questionIds,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.wrongIds != null">
                wrong_ids = #{record.wrongIds,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update ref_person_exam_history
        set id = #{record.id,jdbcType=INTEGER},
        person_id = #{record.personId,jdbcType=INTEGER},
        full_score = #{record.fullScore,jdbcType=VARCHAR},
        obtain_score = #{record.obtainScore,jdbcType=VARCHAR},
        exam_time = #{record.examTime,jdbcType=VARCHAR},
        exam_type = #{record.examType,jdbcType=INTEGER},
        question_ids = #{record.questionIds,jdbcType=LONGVARCHAR},
        wrong_ids = #{record.wrongIds,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update ref_person_exam_history
        set id = #{record.id,jdbcType=INTEGER},
        person_id = #{record.personId,jdbcType=INTEGER},
        full_score = #{record.fullScore,jdbcType=VARCHAR},
        obtain_score = #{record.obtainScore,jdbcType=VARCHAR},
        exam_time = #{record.examTime,jdbcType=VARCHAR},
        exam_type = #{record.examType,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistoryWithBLOBs">
        update ref_person_exam_history
        <set>
            <if test="personId != null">
                person_id = #{personId,jdbcType=INTEGER},
            </if>
            <if test="fullScore != null">
                full_score = #{fullScore,jdbcType=VARCHAR},
            </if>
            <if test="obtainScore != null">
                obtain_score = #{obtainScore,jdbcType=VARCHAR},
            </if>
            <if test="examTime != null">
                exam_time = #{examTime,jdbcType=VARCHAR},
            </if>
            <if test="examType != null">
                exam_type = #{examType,jdbcType=INTEGER},
            </if>
            <if test="questionIds != null">
                question_ids = #{questionIds,jdbcType=LONGVARCHAR},
            </if>
            <if test="wrongIds != null">
                wrong_ids = #{wrongIds,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistoryWithBLOBs">
    update ref_person_exam_history
    set person_id = #{personId,jdbcType=INTEGER},
      full_score = #{fullScore,jdbcType=VARCHAR},
      obtain_score = #{obtainScore,jdbcType=VARCHAR},
      exam_time = #{examTime,jdbcType=VARCHAR},
      exam_type = #{examType,jdbcType=INTEGER},
      question_ids = #{questionIds,jdbcType=LONGVARCHAR},
      wrong_ids = #{wrongIds,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="cc.ligu.mvc.persistence.entity.PersonExamHistory">
    update ref_person_exam_history
    set person_id = #{personId,jdbcType=INTEGER},
      full_score = #{fullScore,jdbcType=VARCHAR},
      obtain_score = #{obtainScore,jdbcType=VARCHAR},
      exam_time = #{examTime,jdbcType=VARCHAR},
      exam_type = #{examType,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="getExamReport" resultMap="ResultMapWithBLOBs">
        SELECT
        t1.*
        FROM
        ref_person_exam_history t1
        JOIN
        (SELECT
        person_id,
        MAX(exam_time) AS exam_time
        FROM
        ref_person_exam_history
        GROUP BY person_id) t2
        ON t1.person_id = t2.person_id
        AND t1.exam_time = t2.exam_time
        WHERE 1=1
        <if test="examTime != null">
           and t1.exam_time &gt; #{examTime}
        </if>
        <if test="examType != null">
           and t1.exam_type = #{examType}
        </if>
    </select>

    <select id="listAllHaveScorePerson" resultType="java.util.Map">
        SELECT
          d.*,
          p.*
        FROM
          (SELECT
            person_id,
            MAX(exam_time) AS latestTime,
            MAX(obtain_score) AS maxScore
          FROM
            ref_person_exam_history
          WHERE obtain_score IS NOT NULL
            AND exam_type = 2
          GROUP BY person_id) d
          INNER JOIN oa_person p
            ON d.person_id = p.`id`
    </select>

    <select id="exportAllScore" resultType="java.util.Map">
       SELECT
          h.*,
          p.`name`,
          p.`identity_num`
        FROM
          ref_person_exam_history h
          LEFT JOIN oa_person p
            ON h.`person_id` = p.`id`
        WHERE h.`obtain_score` IS NOT NULL
          AND h.`exam_type` = 2
        ORDER BY h.`person_id`,
          h.`exam_time`
    </select>
</mapper>